library(tidyverse)
library(missMethods)
knitr::opts_chunk$set(echo = TRUE)
createCombinations <- function(input){
n <- length(input)
x <- c(TRUE,FALSE)
y <- expand.grid(rep(list(x),n)) %>%
filter(rowSums(.) != 0)
for (i in 1:length(input)){
y[,i] [y[,i]] <- input[i]
y[,i][y[,i] != input[i]] <- ""
}
return(y)
}
countCompleteCases <- function(keep_vars, data_df = data, all_vars = variables) {
# vector with combination of variables that will be considered when counting complete cases
# remove NAs from vector
keep_vars <- keep_vars[!is.na(keep_vars)]
# store variables that will de dropped in vector
drop_vars <- setdiff(all_vars, keep_vars)
# data that will be checked for complete cases
#data_df <- example_data
# count the number of complete cases across specified variables
complete_cases <- data_df %>%
# only keep variables in given combo
select(all_of(keep_vars)) %>%
# only keep observations with data for all variables
filter(complete.cases(.)) %>%
# count number of complete cases
nrow(.)
# save number of complete cases and names of variables
complete_cases_info <- c(complete_cases, toString(keep_vars), toString(drop_vars), length(keep_vars),
rep(NA, times = length(all_vars) - 4)
)
}
# import iris dataset
data('iris')
# create different proportions of missingness in every variable
prop_missing <- c(0.1, 0.21, .12, .05, .007)
vars <- names(iris)
# introduce missingness in given variables
example_data <- delete_MCAR(iris, prop_missing, vars)
head(example_data)
variables <- names(example_data)
combinations <- createCombinations(variables)
LoV <- combinations %>%
apply(., 1,as.list) %>% # convert dataframe to list of lists
lapply(unlist, use.names = FALSE) %>% # convert list of lists into list of vectors
lapply(stringi::stri_remove_empty)
variables <- names(example_data)
combinations <- createCombinations(variables)
View(combinations)
complete_cases_15 <- combinations %>%
mutate(
across(.cols = names(combinations),
.fns = ~countCompleteCases(.),
.names = '{.col}_cc')
)
View(combinations)
complete_cases <- combinations %>%
mutate_all(list(~na_if(.,"")))
View(complete_cases)
min_num_vars <- 2
# counting number of variables in combintation
var_count <- combinations %>%
mutate_all(list(~na_if(.,""))) %>%
rowwise() %>%
mutate(num_vars = sum(!is.na(across(everything()))))
vars_min <- filter(var_count, num_vars >= min_num_vars) %>%
select(!num_vars)
min_num_vars <- 2
# counting number of variables in combintation
var_count <- combinations %>%
mutate_all(list(~na_if(.,""))) %>%
rowwise() %>%
mutate(num_vars = sum(!is.na(across(everything()))))
vars_min <- filter(var_count, num_vars >= min_num_vars) %>%
select(!num_vars)
complete_cases <- as.data.frame(t(vars_min)) %>%
mutate(
across(.cols = names(combinations),
.fns = ~countCompleteCases(.),
.names = '{.col}_cc')
) %>%
select(ends_with('_cc')) %>%
janitor::remove_empty(which = c("rows")) %>%
t(.) %>%
as.data.frame(.) %>%
setNames(c('complete_cases', 'keep_vars', 'drop_vars', 'num_vars_kept'))
complete_cases <- as.data.frame(t(vars_min))
View(complete_cases)
complete_cases <- as.data.frame(t(vars_min)) %>%
mutate(
across(.cols = names(combinations),
.fns = ~countCompleteCases(.),
.names = '{.col}_cc')
)
complete_cases <- as.data.frame(t(vars_min)) %>%
mutate(
across(.cols = names(.),
.fns = ~countCompleteCases(.),
.names = '{.col}_cc')
)
vars_min <- filter(var_count, num_vars >= min_num_vars) %>%
select(!num_vars) %>%
as.data.frame(t(.))
View(vars_min)
# Chunk 1
library(tidyverse)
createCombinations <- function(input){
n <- length(input)
x <- c(TRUE,FALSE)
y <- expand.grid(rep(list(x),n)) %>%
filter(rowSums(.) != 0)
for (i in 1:length(input)){
y[,i] [y[,i]] <- input[i]
y[,i][y[,i] != input[i]] <- ""
}
return(y)
}
countCompleteCases <- function(keep_vars, data_df, all_vars) {
# vector with combination of variables that will be considered when counting complete cases, NAs need to be removed
keep_vars <- keep_vars[!is.na(keep_vars)]
# store variables that will de dropped in vector
drop_vars <- setdiff(all_vars, keep_vars)
# count the number of complete cases across specified variables
complete_cases <- data_df %>%
# only keep variables in given combo
select(all_of(keep_vars)) %>%
# only keep observations with data for all variables
filter(complete.cases(.)) %>%
# count number of complete cases
nrow(.)
# save number of complete cases and names of variables
complete_cases_info <- c(complete_cases, toString(keep_vars), toString(drop_vars), length(keep_vars),
rep(NA, times = length(all_vars) - 4)
)
}
# import iris dataset
data('iris')
# create different proportions of missingness in every variable
prop_missing <- c(0.1, 0.21, .12, .05, .007)
vars <- names(iris)
# introduce missingness in given variables
example_data <- delete_MCAR(iris, prop_missing, vars)
remove.packages("rlang")
install.packages("rlang")
library(tidyverse)
remove.packages("vctrs")
install.packages("vctrs")
library(tidyverse)
library(tidyverse)
library(missMethods)
knitr::opts_chunk$set(echo = TRUE)
# Chunk 1
library(tidyverse)
library(missMethods)
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
createCombinations <- function(input){
n <- length(input)
x <- c(TRUE,FALSE)
y <- expand.grid(rep(list(x),n)) %>%
filter(rowSums(.) != 0)
for (i in 1:length(input)){
y[,i] [y[,i]] <- input[i]
y[,i][y[,i] != input[i]] <- ""
}
return(y)
}
# Chunk 3
countCompleteCases <- function(keep_vars, data_df, all_vars) {
# vector with combination of variables that will be considered when counting complete cases, NAs need to be removed
keep_vars <- keep_vars[!is.na(keep_vars)]
# store variables that will de dropped in vector
drop_vars <- setdiff(all_vars, keep_vars)
# count the number of complete cases across specified variables
complete_cases <- data_df %>%
# only keep variables in given combo
select(all_of(keep_vars)) %>%
# only keep observations with data for all variables
filter(complete.cases(.)) %>%
# count number of complete cases
nrow(.)
# save number of complete cases and names of variables
complete_cases_info <- c(complete_cases, toString(keep_vars), toString(drop_vars), length(keep_vars),
rep(NA, times = length(all_vars) - 4)
)
}
# Chunk 4
# import iris dataset
data('iris')
# create different proportions of missingness in every variable
prop_missing <- c(0.1, 0.21, .12, .05, .007)
vars <- names(iris)
# introduce missingness in given variables
example_data <- delete_MCAR(iris, prop_missing, vars)
# view format of input data
head(example_data)
# Chunk 5
# use integer to specify minimum number of variables that must be kept
min_num_vars <- 3
# Chunk 6
# create vector with all variable names
variables <- names(example_data)
# pass in variables names vector into createCombinations() to create dataframe with all possible combinations of all variables
combinations <- createCombinations(variables)
# count number of variables in every combination and only keep combos with minimum number of variables specified by user
var_count <- combinations %>%
mutate_all(list(~na_if(.,""))) %>%
rowwise() %>%
mutate(num_vars = sum(!is.na(across(everything())))) %>%
filter(num_vars >= min_num_vars) %>%
select(!num_vars) %>%
t(.) %>%
as.data.frame(.)
# Chunk 7
complete_cases <- var_count %>%
mutate(
across(.cols = names(.),
.fns = ~countCompleteCases(keep_vars = .,
data_df = data,
all_vars = variables),
.names = '{.col}_cc')
) %>%
select(ends_with('_cc')) %>%
janitor::remove_empty(which = c("rows")) %>%
t(.) %>%
as.data.frame(.) %>%
setNames(c('complete_cases', 'keep_vars', 'drop_vars', 'num_vars_kept'))
rlang::last_trace()
