---
title: "Example of complete cases tool using the Iris data set"
author: "Selene Banuelos"
format: 
    html:
        df-print: kable
editor: visual
---

## Summary

This is an example of using the complete cases tool with the Iris data set. Missingness is introduced to the data set to simulate real world data.

## Setup

```{r}
library(tidyverse)
library(missMethods)

knitr::opts_chunk$set(echo = TRUE)
```

## Functions

```{r}
createCombinations <- function(input){
  n <- length(input)
  x <- c(TRUE,FALSE)
  
  y <- expand.grid(rep(list(x),n)) %>%
    filter(rowSums(.) != 0)
  
  for (i in 1:length(input)){
    y[,i] [y[,i]] <- input[i]
    y[,i][y[,i] != input[i]] <- ""
    
  }

  return(y)
}
```

```{r}
countCompleteCases <- function(keep_vars, data_df, all_vars) {
    # vector with combination of variables that will be considered when counting complete cases, NAs need to be removed
    keep_vars <- keep_vars[!is.na(keep_vars)]
    
    # store variables that will de dropped in vector
    drop_vars <- setdiff(all_vars, keep_vars)
    
    # count the number of complete cases across specified variables
    complete_cases <- data_df %>%
        # only keep variables in given combo
        select(all_of(keep_vars)) %>%
        # only keep observations with data for all variables
        filter(complete.cases(.)) %>%
        # count number of complete cases
        nrow(.)
    
    # save number of complete cases and names of variables
    complete_cases_info <- c(complete_cases, toString(keep_vars), toString(drop_vars), length(keep_vars),
                             rep(NA, times = length(all_vars) - 4)
                             )
    
}
```

## Create example input data using Iris data set

```{r}
# import iris dataset
data('iris')

# create different proportions of missingness in every variable
prop_missing <- c(0.1, 0.21, .12, .05, .007)
vars <- names(iris)

# introduce missingness in given variables
example_data <- delete_MCAR(iris, prop_missing, vars)

# view format of input data
view(example_data)
```

## Implementation

Specify the minimum number of variables in each combination. This step reduces the number of combinations evaluated and can dramatically reduce the time it takes for the script to run.

```{r}
# use integer to specify minimum number of variables that must be kept
min_num_vars <- 3

# this example will only show combinations of 3 or more variables
```

Now, let's create a data frame that contains all possible combinations of the variables in the Iris data

```{r}
# create vector with all variable names
variables <- names(example_data)

# pass in variables names vector into createCombinations() to create dataframe with all possible combinations of all variables
combinations <- createCombinations(variables) 

# count number of variables in every combination and only keep combos with minimum number of variables specified by user
var_count <- combinations %>%
  mutate_all(list(~na_if(.,""))) %>%
  rowwise() %>%
  mutate(num_vars = sum(!is.na(across(everything())))) %>%
  filter(num_vars >= min_num_vars) %>%
    select(!num_vars) %>%
  t(.) %>%
  as.data.frame(.)
```

Finally, count the number of complete cases across each combination of variables in the Iris data

```{r}
complete_cases <- var_count %>%
  mutate(
    across(.cols = names(.), 
           .fns = ~countCompleteCases(keep_vars = .,
                                      data_df = example_data,
                                      all_vars = variables),
           .names = '{.col}_cc')
  ) %>%
  select(ends_with('_cc')) %>%
  janitor::remove_empty(which = c("rows")) %>%
  t(.) %>%
  as.data.frame(.) %>%
  setNames(c('complete_cases', 'keep_vars', 'drop_vars', 'num_vars_kept'))
```

## Output

```{r}
view(complete_cases)
```
