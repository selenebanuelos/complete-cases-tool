---
title: "Variable Selection Tool to Maximize Complete Cases"
author: "Selene Banuelos"
format: 
    html:
        df-print: kable
editor: visual
---

## Summary

The purpose of this script is to evaluate the number of complete cases for every possible combination of variables in your data, to help you decide which variables to keep and which to drop to maximize sample size.

## Description

When doing complete case analysis, researchers must drop participants that are missing values in one or more of the variables included in their model. For this reason, some combinations of variables may result in a smaller sample size than others due to varying degrees of missingness across variables. At times, a researcher must make a decision about which variables are most important to keep in their study while taking into consideration how inclusions of those variables will affect the number of complete cases, and in turn, the final analytical sample size. This script was designed as a tool to help in that decision. A user can import their data, run this script, and obtain an output that consists of a table that lists every possible combination of variables present in the dataset and the corresponding number of complete cases for each given combination.

```{r warning=FALSE, message=FALSE}
library(tidyverse)
library(missMethods)

knitr::opts_chunk$set(echo = TRUE)
```

## Functions

The code used in the createCombinations function has been adapted from Stack Overflow user, @Park <https://stackoverflow.com/users/16729175/park>

The original code can be found here: <https://stackoverflow.com/questions/70060473/create-combination-of-all-elements-in-a-list>

createCombinations is a function that creates all possible combinations of elements in a given list

```{r}
createCombinations <- function(input){
  n <- length(input)
  x <- c(TRUE,FALSE)
  
  y <- expand.grid(rep(list(x),n)) %>%
    filter(rowSums(.) != 0)
  
  for (i in 1:length(input)){
    y[,i] [y[,i]] <- input[i]
    y[,i][y[,i] != input[i]] <- ""
    
  }

  return(y)
}
```

countCompleteCases is a function that creates a list containing 4 elements: one combination of your variables, the corresponding count of complete cases across those variables, the variables from your dataset that are missing from the combination, and the number of variables in the combination.

```{r}
countCompleteCases <- function(keep_vars, data_df, all_vars) {
    # vector with combination of variables that will be considered when counting complete cases, NAs need to be removed
    keep_vars <- keep_vars[!is.na(keep_vars)]
    
    # store variables that will de dropped in vector
    drop_vars <- setdiff(all_vars, keep_vars)
    
    # count the number of complete cases across specified variables
    complete_cases <- data_df %>%
        # only keep variables in given combo
        select(all_of(keep_vars)) %>%
        # only keep observations with data for all variables
        filter(complete.cases(.)) %>%
        # count number of complete cases
        nrow(.)
    
    # save number of complete cases and names of variables
    complete_cases_info <- c(complete_cases, toString(keep_vars), toString(drop_vars), length(keep_vars),
                             rep(NA, times = length(all_vars) - 4)
                             )
    
}
```

## Example input data

**DO NOT USE THESE DATA - only here to show what your input data frame should look like**

Create some example data using the Iris dataset

```{r}
# import iris dataset
data('iris')

# create different proportions of missingness in every variable
prop_missing <- c(0.1, 0.21, .12, .05, .007)
vars <- names(iris)

# introduce missingness in given variables
example_data <- delete_MCAR(iris, prop_missing, vars)
```

**Input dataframe format**: remove any unwanted or identifying variables (sample IDs, etc.), leaving only variables you're interested in keeping for your analysis. Please see below for example.

```{r}
head(example_data)
```

## Implementation

**Make sure to use your own data here!**

Let's upload your data here and specify the minimum number of variables you want to keep in your dataset:

```{r}
# create an object containing your data
data <- read.csv(file  = 'path/to/data.csv')

# specify the minimum number of variables that must be kept
min_num_vars <- ... # replace ... with integer
```

Now, let's create a dataframe that contains all possible combinations of the variables in your data

```{r}
# create vector with all variable names
variables <- names(data)

# pass in variables names vector into createCombinations() to create dataframe with all possible combinations of all variables
combinations <- createCombinations(variables) 

# count number of variables in every combination and only keep combos with minimum number of variables specified by user
var_count <- combinations %>%
  mutate_all(list(~na_if(.,""))) %>%
  rowwise() %>%
  mutate(num_vars = sum(!is.na(across(everything())))) %>%
  filter(num_vars >= min_num_vars) %>%
    select(!num_vars) %>%
  t(.) %>%
  as.data.frame(.)
```

Finally, count the number of complete cases across each combination of variables in your sample

```{r}
complete_cases <- var_count %>%
  mutate(
    across(.cols = names(.), 
           .fns = ~countCompleteCases(keep_vars = .,
                                      data_df = data,
                                      all_vars = variables),
           .names = '{.col}_cc')
  ) %>%
  select(ends_with('_cc')) %>%
  janitor::remove_empty(which = c("rows")) %>%
  t(.) %>%
  as.data.frame(.) %>%
  setNames(c('complete_cases', 'keep_vars', 'drop_vars', 'num_vars_kept'))
```

## Output

```{r}
head(complete_cases)
```
